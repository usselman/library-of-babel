[{"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/index.tsx":"1","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/reportWebVitals.ts":"2","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/App.tsx":"3","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/page/SamplePage.tsx":"4","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/components/PandaConnectButton.tsx":"5","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/components/OrdinalCard.jsx":"6","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/index.tsx":"7","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/reportWebVitals.ts":"8","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/App.tsx":"9","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/OrdinalCard.jsx":"10","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/PandaConnectButton.tsx":"11","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/statsData.js":"12","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/SonataCard.jsx":"13","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/page/HomePage.tsx":"14","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/page/api/orderbook.js":"15","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/page/api/hodlbook.js":"16","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/bsOrderToTxFormat.js":"17","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/PriceHistoryChart.js":"18","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/page/api/ogbook.js":"19","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/OGMarketplaceCard.jsx":"20","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/HODLMarketplaceCard.tsx":"21","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/LRCCard.tsx":"22","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/MarketplaceCard.jsx":"23","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/OGCards.jsx":"24","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/page/api/frogbook.js":"25","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/FrogMarketplaceCard.tsx":"26","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/page/api/gayfrogbook.js":"27","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/GayFrogMarketplaceCard.tsx":"28"},{"size":580,"mtime":1701655221928,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":1701655221929,"results":"31","hashOfConfig":"30"},{"size":124,"mtime":1701655221928,"results":"32","hashOfConfig":"30"},{"size":3213,"mtime":1701660069063,"results":"33","hashOfConfig":"30"},{"size":626,"mtime":1701656414015,"results":"34","hashOfConfig":"30"},{"size":1096,"mtime":1701659482957,"results":"35","hashOfConfig":"30"},{"size":651,"mtime":1702258180484,"results":"36","hashOfConfig":"37"},{"size":425,"mtime":1701655221929,"results":"38","hashOfConfig":"37"},{"size":171,"mtime":1703711632467,"results":"39","hashOfConfig":"37"},{"size":7989,"mtime":1707468391319,"results":"40","hashOfConfig":"37"},{"size":646,"mtime":1703226227646,"results":"41","hashOfConfig":"37"},{"size":13856,"mtime":1701672539121,"results":"42","hashOfConfig":"37"},{"size":2407,"mtime":1707468444340,"results":"43","hashOfConfig":"37"},{"size":22758,"mtime":1709066924043,"results":"44","hashOfConfig":"37"},{"size":590,"mtime":1703711632468,"results":"45","hashOfConfig":"37"},{"size":1221,"mtime":1703711632468,"results":"46","hashOfConfig":"37"},{"size":838,"mtime":1702756988243,"results":"47","hashOfConfig":"48"},{"size":3397,"mtime":1703886286020,"results":"49","hashOfConfig":"37"},{"size":1150,"mtime":1703711632468,"results":"50","hashOfConfig":"37"},{"size":4836,"mtime":1709848711751,"results":"51","hashOfConfig":"37"},{"size":5378,"mtime":1709848711757,"results":"52","hashOfConfig":"37"},{"size":2538,"mtime":1707523565614,"results":"53","hashOfConfig":"37"},{"size":8651,"mtime":1709848659577,"results":"54","hashOfConfig":"37"},{"size":3224,"mtime":1707523365909,"results":"55","hashOfConfig":"37"},{"size":691,"mtime":1708805016689,"results":"56","hashOfConfig":"37"},{"size":2651,"mtime":1709848711745,"results":"57","hashOfConfig":"37"},{"size":622,"mtime":1708806206835,"results":"58","hashOfConfig":"37"},{"size":3201,"mtime":1709848711758,"results":"59","hashOfConfig":"37"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"r43vzq",{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"63"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1yls9zp",{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1c7mgci",{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/index.tsx",[],[],["152"],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/reportWebVitals.ts",[],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/App.tsx",[],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/page/SamplePage.tsx",["153","154","155","156","157"],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/components/PandaConnectButton.tsx",["158"],[],"import pandaIcon from \"../assets/panda-icon.svg\";\n\nexport type PandaConnectButtonProps = {\n  onClick: () => void;\n  className?: string; // Optional className prop\n};\n\nexport const PandaConnectButton = (props: PandaConnectButtonProps) => {\n  const { onClick, className } = props;\n  return (\n    <button\n      onClick={onClick}\n      className={`flex items-center p-4 rounded border-none cursor-pointer text-lg font-bold text-gray-900 bg-green-300 ${className}`}\n    >\n      {/* <img src={pandaIcon} alt=\"icon\" className=\"mr-4 w-6 h-6\" /> */}\n      Connect Panda Wallet\n    </button>\n  );\n};\n\nexport default PandaConnectButton;\n","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/pandawalletsample/src/components/OrdinalCard.jsx",[],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/index.tsx",[],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/reportWebVitals.ts",[],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/App.tsx",["159"],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/OrdinalCard.jsx",["160","161"],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/PandaConnectButton.tsx",["162"],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/statsData.js",["163","164"],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/SonataCard.jsx",[],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/page/HomePage.tsx",["165","166","167","168","169","170","171","172","173","174"],[],"import React, { useEffect, useState } from 'react';\nimport getGlobalOrderBook from './api/orderbook';\nimport getHodlBook from './api/hodlbook';\nimport getOGBook from './api/ogbook';\nimport getFrogBook from './api/frogbook';\nimport getGayFrogBook from './api/gayfrogbook';\nimport { PandaConnectButton } from \"../components/PandaConnectButton\";\nimport OrdinalCard from \"../components/OrdinalCard\";\nimport LRCCard from \"../components/LRCCard\";\nimport SonataCard from \"../components/SonataCard\";\nimport OGCards from \"../components/OGCards\";\nimport MarketplaceCard from \"../components/MarketplaceCard\";\nimport HODLMarketplaceCard from \"../components/HODLMarketplaceCard\";\nimport OGMarketplaceCard from \"../components/OGMarketplaceCard\";\nimport FrogMarketplaceCard from '../components/FrogMarketplaceCard';\nimport GayFrogMarketplaceCard from '../components/GayFrogMarketplaceCard';\nimport PriceHistoryChart from \"../components/PriceHistoryChart\";\nimport { Tooltip } from 'react-tooltip';\nimport axios from 'axios';\nimport {\n  Addresses,\n  SignedMessage,\n  usePandaWallet,\n} from \"panda-wallet-provider\";\n\nconst initProvider = () => {\n  if (\"panda\" in window) {\n    const provider = window.panda;\n\n    if (provider?.isReady) {\n      return provider;\n    }\n  }\n\n  window.open(\n    \"https://chromewebstore.google.com/detail/panda-wallet/mlbnicldlpdimbjdcncnklfempedeipj\",\n    \"_blank\"\n  );\n};\n\nexport const HomePage = () => {\n  const wallet = usePandaWallet();\n  const [pubKey, setPubKey] = useState<string | undefined>();\n  const [addresses, setAddresses] = useState<Addresses | undefined>();\n  const [ordinals, setOrdinals] = useState<any[]>([]);\n  const [ordAddress, setOrdAddress] = useState<string | undefined>();\n  const [bsvAddress, setBsvAddress] = useState<string | undefined>();\n  const [identityAddress, setIdentityAddress] = useState<string | undefined>();\n  const [hodlSum, setHodlSum] = useState<number>(0);\n  const [selectedType, setSelectedType] = useState('HODL Marketplace');\n  const [orderBook, setOrderBook] = useState<any[]>([]);\n  const [hodlBook, setHodlBook] = useState<any[]>([]);\n  const [ogBook, setOGBook] = useState<any[]>([]);\n  const [frogBook, setFrogBook] = useState<any[]>([]);\n  const [gayFrogBook, setGayFrogBook] = useState<any[]>([]);\n  const [viewMode, setViewMode] = useState('collection');\n  const [locations, setLocations] = useState<any[]>([]);\n  const [exchangeRate, setExchangeRate] = useState<number>(0);\n  const [currentBlockHeight, setCurrentBlockHeight] = useState<number>(0);\n\n  /** FETCH GLOBAL ORDER BOOK **/\n  useEffect(() => {\n    const fetchOrderBook = async () => {\n      try {\n        const data = await getGlobalOrderBook();\n        setOrderBook(data);\n        //console.log('order book: ', data);\n      } catch (error) {\n        console.error(\"Failed to fetch order book\", error);\n      }\n    };\n\n    fetchOrderBook();\n  }, []);\n\n  /** FETCH GLOBAL HODL BOOK **/\n  useEffect(() => {\n    const fetchHodlBook = async () => {\n      try {\n        const data = await getHodlBook();\n        setHodlBook(data);\n        //console.log('hodl book: ', data);\n      } catch (error) {\n        console.error(\"Failed to fetch hodl book\", error);\n      }\n    };\n\n    fetchHodlBook();\n  }, []);\n\n  /** FETCH GLOBAL OG BOOK **/\n  useEffect(() => {\n    const fetchOGBook = async () => {\n      try {\n        const data = await getOGBook();\n        setOGBook(data);\n        //console.log('og book: ', data);\n      } catch (error) {\n        console.error(\"Failed to fetch og book\", error);\n      }\n    };\n\n    fetchOGBook();\n  }, []);\n\n  /** FETCH GLOBAL FROG BOOK **/\n  useEffect(() => {\n    const fetchFrogBook = async () => {\n      try {\n        const data = await getFrogBook();\n        setFrogBook(data);\n        //console.log('frog book: ', data);\n      } catch (error) {\n        console.error(\"Failed to fetch frog book\", error);\n      }\n    };\n\n    fetchFrogBook();\n  }, []);\n\n  /** FETCH GLOBAL GAY FROG BOOK **/\n  useEffect(() => {\n    const fetchGayFrogBook = async () => {\n      try {\n        const data = await getGayFrogBook();\n        setGayFrogBook(data);\n        console.log('gay frog book: ', data);\n      } catch (error) {\n        console.error(\"Failed to fetch frog book\", error);\n      }\n    };\n\n    fetchGayFrogBook();\n  }, []);\n\n  /** FETCH WALLET INFO **/\n  useEffect(() => {\n    const fetchData = async () => {\n      if (wallet && wallet.isConnected) {\n        //location.reload();\n        const isConnected = await wallet.isConnected();\n        if (isConnected) {\n          const addrs = await wallet.getAddresses();\n          if (addrs) {\n            setAddresses(addrs);\n            setOrdAddress(addrs.ordAddress);\n            setBsvAddress(addrs.bsvAddress);\n            setIdentityAddress(addrs.identityAddress);\n          }\n          const ords = await wallet.getOrdinals();\n          if (ords) setOrdinals(ords);\n          //console.log(\"Ordinals: \", ords);\n        }\n      }\n    };\n\n    if (wallet) {\n      fetchData();\n    }\n  }, [wallet, addresses]);\n\n  /** HODL VERIFIER **/\n  useEffect(() => {\n    const pullHODLs = async () => {\n      const query = `\n          {locations}\n      `;\n\n      try {\n        const response = await axios.post('https://api.hodlock.com/graphql', { query });\n        if (response.data && response.data.data && response.data.data.locations) {\n          setLocations(response.data.data.locations);\n          console.log(\"GraphQL: \", response.data);\n        } else {\n          console.error('GraphQL response does not contain expected data.');\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    // Call pullHODLs when the component mounts\n    pullHODLs();\n  }, []);\n\n  /** GET EXCHANGE RATE **/\n  useEffect(() => {\n    async function getExchangeRate() {\n      const url = 'https://api.whatsonchain.com/v1/bsv/main/exchangerate';\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error('Network response was not ok ' + response.statusText);\n        }\n        const data = await response.json();\n        setExchangeRate(parseFloat(data.rate));\n        console.log(\"Exchange rate fetched: \", exchangeRate);\n      } catch (error) {\n        console.error(\"Fetching exchange rate failed: \", error);\n      }\n    }\n\n    getExchangeRate();\n  }, []);\n\n  /** GET CURRENT BLOCK HEIGHT **/\n  useEffect(() => {\n    async function getCurrentBlockHeight() {\n      const url = 'https://api.whatsonchain.com/v1/bsv/main/chain/info';\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error('Network response was not ok ' + response.statusText);\n        }\n        const data = await response.json();\n        setCurrentBlockHeight(parseInt(data.blocks, 10));\n        console.log(\"Current block height fetched: \", currentBlockHeight);\n      } catch (error) {\n        console.error(\"Fetching block height failed: \", error);\n      }\n    }\n    getCurrentBlockHeight();\n  }, []);\n\n  const handleConnect = async () => {\n    if (!wallet.connect) {\n      window.open(\n        \"https://github.com/Panda-Wallet/panda-wallet#getting-started-alpha\",\n        \"_blank\"\n      );\n      return;\n    }\n    const key = await wallet.connect();\n    if (key) setPubKey(key);\n  };\n\n  const handleChange = (newType: any) => {\n    setSelectedType(newType);\n  };\n\n  const listOrdinal = async () => {\n    alert('Coming soon!');\n  }\n\n  const purchaseOrdinal = async (outpoint: any, marketplaceRate: any, marketplaceAddress: string) => {\n    const purchaseParams = {\n      outpoint,\n      marketplaceRate,\n      marketplaceAddress\n    };\n\n    try {\n      const txid = await wallet.purchaseOrdinal(purchaseParams);\n      console.log(`Purchase successful! Transaction ID: ${txid}`);\n      // Update the UI or state as needed\n    } catch (err: any) {\n      console.error(`Purchase failed: ${err.message}`);\n      // Handle errors and update UI accordingly\n    }\n  };\n\n  const renderContent = () => {\n    switch (selectedType) {\n      case 'OGs':\n        return renderOGCards();\n      case 'Sonatas':\n        return renderSonatas();\n      case 'LRC-20s':\n        return renderLRC20Cards();\n      case 'Tale of Shua Gears':\n        return renderOrdinalCards();\n      default:\n      case 'Global Marketplace':\n        return renderGlobalMarketplace();\n      case 'HODL Marketplace':\n        return renderGlobalHodlMarketplace();\n      case 'OG Marketplace':\n        return renderGlobalOGMarketplace();\n      case 'Frog Marketplace':\n        return renderFrogMarketplace();\n      case 'Gay Frog Marketplace':\n        return renderGayFrogMarketplace();\n        return null;\n    }\n  };\n\n  const renderGlobalMarketplace = () => {\n    const filteredListings = orderBook.filter(\n      (listing: any) => {\n        return (\n          listing?.origin?.data?.map?.app === \"taleofshua\"\n        )\n      }\n    ).sort((a, b) => {\n      // Assuming the price is stored in `listing.data.list.price` and is a number\n      const numA = extractNumber(a?.data?.list?.price?.toString());\n      const numB = extractNumber(b?.data?.list?.price?.toString());\n      return (numA ?? 0) - (numB ?? 0);\n    });\n\n    return (\n      <>\n        {/* <div className=\"text-center text-2xl mt-4 mb-4\">\n          Tale of Shua Gear Marketplace\n        </div> */}\n        <div className=\"text-center text-2xl mt-4 mb-4\">\n          <span className=\"underline hover:text-blue-500 rounded-xl\"><a href=\"https://taleofshua.com\">Gear</a></span> is a lock-to-mint collection by Joshua Henslee.\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {filteredListings.map((listing, index) => (\n            <MarketplaceCard key={index} listing={listing} purchaseOrdinal={purchaseOrdinal} exchangeRate={exchangeRate} />\n          ))}\n        </div>\n      </>\n    )\n  }\n\n  const renderGlobalHodlMarketplace = () => {\n    const filteredListings = hodlBook?.filter(\n      (listing: any) => {\n        return (\n          listing?.origin?.data?.insc?.json?.id === \"bfd3bfe2d65a131e9792ee04a2da9594d9dc8741a7ab362c11945bfc368d2063_1\"\n        )\n      }\n    ).sort((a, b) => {\n      const numA = extractNumber(a?.data?.list?.price?.toString());\n      const numB = extractNumber(b?.data?.list?.price?.toString());\n      return (numA ?? 0) - (numB ?? 0);\n    });\n\n    // let marketcap = (filteredListings[0].origin.data.list.price / filteredListings[0].origin.data.insc.json.amt) * exchangeRate;\n    // console.log(\"Hodl Marketcap: \", marketcap);\n\n    return (\n      <>\n        <div className=\"text-center text-2xl mt-4 mb-4\">\n          <span className=\"underline hover:text-blue-500 rounded-xl\"><a href=\"https://ordinals.gorillapool.io/content/1f2d8349d15ef5287c5cada779f7e6875e123fe0ab788b478a17514b5746db90_0\">$hodl</a></span> is the first of its kind LRC-20 token.\n        </div>\n        <div className=\"h-1/4\">\n          <PriceHistoryChart data={filteredListings} />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-1\">\n          {filteredListings.map((listing, index) => (\n            <HODLMarketplaceCard key={index} listing={listing} locations={locations} purchaseOrdinal={purchaseOrdinal} exchangeRate={exchangeRate} />\n\n          ))}\n        </div>\n\n\n      </>\n    )\n  }\n\n  const renderFrogMarketplace = () => {\n    const filteredListings = frogBook.sort((a, b) => {\n      // Assuming the price is stored in `listing.data.list.price` and is a number\n      const numA = extractNumber(a?.data?.list?.price?.toString());\n      const numB = extractNumber(b?.data?.list?.price?.toString());\n      return (numA ?? 0) - (numB ?? 0);\n    });\n\n    return (\n      <>\n        <div className=\"text-center text-2xl mt-4 mb-4\">\n          <span className=\"underline hover:text-blue-500 rounded-xl\"><a\n            href=\"https://www.raredropper.com/ogs/frogs\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >Frogs</a></span> were minted using OG namespaces.\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {filteredListings.map((listing) => (\n            <FrogMarketplaceCard listing={listing} purchaseOrdinal={purchaseOrdinal} exchangeRate={exchangeRate} />\n\n          ))}\n        </div>\n      </>\n    )\n  }\n\n  const renderGayFrogMarketplace = () => {\n    const filteredListings = gayFrogBook.sort((a, b) => {\n      // Assuming the price is stored in `listing.data.list.price` and is a number\n      const numA = extractNumber(a?.data?.list?.price?.toString());\n      const numB = extractNumber(b?.data?.list?.price?.toString());\n      return (numA ?? 0) - (numB ?? 0);\n    });\n\n    return (\n      <>\n        <div className=\"text-center text-2xl mt-4 mb-4\">\n          <span className=\"underline hover:text-blue-500 rounded-xl\"><a\n            href=\"https://www.hodlocker.com/bitcoiner/post/1ece58cc7c083cfb0382e5c0dbd7dc61e908d16ce4e6c2224e3b5283194f74f5\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >Gay Frogs</a></span> were minted and distributed to lockers.\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {filteredListings.map((listing) => (\n            <GayFrogMarketplaceCard listing={listing} purchaseOrdinal={purchaseOrdinal} exchangeRate={exchangeRate} />\n\n          ))}\n        </div>\n      </>\n    )\n  }\n\n  const renderGlobalOGMarketplace = () => {\n    const filteredListings = ogBook.filter(\n      (listing: any) => {\n        return (\n          listing?.origin?.data?.insc?.words[1] === \"og\"\n        )\n      }\n    ).sort((a, b) => {\n      // Assuming the price is stored in `listing.data.list.price` and is a number\n      const numA = extractNumber(a?.data?.list?.price?.toString());\n      const numB = extractNumber(b?.data?.list?.price?.toString());\n      return (numA ?? 0) - (numB ?? 0);\n    });\n\n    return (\n      <>\n        <div className=\"text-center text-2xl mt-4 mb-4\">\n          <span className=\"underline hover:text-blue-500 rounded-xl\"><a href=\"https://www.hodlocker.com/zackwins/post/d2167c682c0ce72574fe2d21a81987571d42dc51b38c94c0cbe16ac40ad770c0\">.OG</a></span> is the first of its kind lock-to-mint numbered namespace.\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {filteredListings.map((listing, index) => (\n            <OGMarketplaceCard listing={listing} purchaseOrdinal={purchaseOrdinal} exchangeRate={exchangeRate} />\n\n          ))}\n        </div>\n      </>\n    )\n  }\n\n  const renderSonatas = () => {\n\n    const filteredSonatas = ordinals.filter(\n      (ordinal) =>\n        ordinal?.data?.insc?.json?.p ===\n        \"sonata\"\n    );\n    return (\n      <>\n        <div className=\"text-center text-2xl mt-4 mb-4\">\n          Sonata is an experimental format to inscribe music metadata on-chain.\n        </div>\n        <div className=\"text-center text-2xl m-8\">\n          <a className=\"hover:text-blue-900 hover:bg-blue-200 bg-gray-100 text-gray-900 border-0 border-black rounded-xl p-4 m-4\" href=\"https://usselman.github.io/distromint/\">Inscribe here</a>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n          {filteredSonatas.map((ordinal, index) => (\n            <SonataCard key={index} ordinal={ordinal} transferOrdinal={transferOrdinal} />\n          ))}\n        </div>\n      </>\n    );\n\n  }\n\n  const renderLRC20Cards = () => {\n    const filteredLRC20s = ordinals.filter(\n      (ordinal) =>\n        ordinal?.data?.insc?.json?.p ===\n        \"lrc-20\"\n    );\n    //console.log(\"LRC20s: \", filteredLRC20s);\n    return (\n      <>\n        <div className=\"text-center text-2xl mt-4 mb-4\">\n          <span className=\"underline hover:text-blue-500 rounded-xl\"><a href=\"https://ordinals.gorillapool.io/content/1f2d8349d15ef5287c5cada779f7e6875e123fe0ab788b478a17514b5746db90_0\">$hodl</a></span> is the first of its kind LRC-20 token.\n        </div>\n        <div>\n          <h4 className=\"text-2xl font-semibold text-black text-center\">\n            Total $hodl: {hodlSum}\n          </h4>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4\">\n\n          {filteredLRC20s.map((ordinal, index) => (\n            <LRCCard key={index} ordinal={ordinal} setHodlSum={setHodlSum} locations={locations} />\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  const extractNumber = (text: string): number | null => {\n    const parts = text.split(\" \");\n    if (parts.length > 0 && !isNaN(parseInt(parts[0], 10))) {\n      return parseInt(parts[0], 10);\n    }\n    return null;\n  };\n\n  const renderOGCards = () => {\n\n    const filteredOGs = ordinals\n      .filter((ordinal) => {\n        return (\n          ordinal?.origin?.data?.insc?.words &&\n          ordinal.origin.data.insc.words.length > 1 &&\n          ordinal.origin.data.insc.words[1] === \"og\"\n        );\n      })\n    // .sort((a, b) => {\n    //   const numA = extractNumber(a?.data?.insc?.text);\n    //   const numB = extractNumber(b?.data?.insc?.text);\n    //   return (numA ?? 0) - (numB ?? 0);\n    // });\n\n    return (\n      <>\n        <div className=\"text-center text-2xl mt-4 mb-4\">\n          <span className=\"underline hover:text-blue-500 rounded-xl\"><a href=\"https://www.hodlocker.com/zackwins/post/d2167c682c0ce72574fe2d21a81987571d42dc51b38c94c0cbe16ac40ad770c0\">.OG</a></span> is the first of its kind lock-to-mint numbered namespace.\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n          {filteredOGs.map((ordinal, index) => (\n            <OGCards key={index} ordinal={ordinal} address={ordAddress} transferOrdinal={transferOrdinal} />\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  const getRarityValue = (name: string) => {\n    const parts = name.split(\" \");\n    const hasPrefix = parts.length > 1 && parts[0] !== \"of\";\n    const hasSuffix = parts.includes(\"of\");\n\n    if (hasPrefix && hasSuffix) return 3; // Rare\n    if (hasPrefix || hasSuffix) return 2; // Uncommon\n    return 1; // Common\n  };\n\n  const renderOrdinalCards = () => {\n    const dataToShow = viewMode === 'collection' ? ordinals : orderBook;\n\n    const filteredOrdinals = ordinals.filter(\n      (ordinal) =>\n        ordinal?.data?.map?.subTypeData?.collectionId ===\n        \"b68a700c91c6ece44aa6c2148c84c25a9a22da739769110e1ba01dbb0ff2df4a_1\"\n    )\n      .map(ordinal => ({\n        ...ordinal,\n        rarityValue: getRarityValue(ordinal.data.insc.text)\n      }))\n      .sort((a, b) => b.rarityValue - a.rarityValue) // Sort by descending rarity value\n      .map((ordinal, index) => (\n        <OrdinalCard key={index} ordinal={ordinal} transferOrdinal={transferOrdinal} listOrdinal={listOrdinal} />\n      ));\n\n    return (\n      <>\n        <div className=\"text-center text-2xl mt-4 mb-4\">\n          <span className=\"underline hover:text-blue-500 rounded-xl\"><a href=\"https://taleofshua.com\">Tale of Shua Gear</a></span> is a lock-to-mint collection by Joshua Henslee.\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\">\n          {filteredOrdinals}\n        </div>\n      </>\n    );\n  };\n\n  const transferOrdinal = async (address: string, origin: string, outpoint: string) => {\n    try {\n      const txid = await wallet.transferOrdinal({ address, origin, outpoint });\n      console.log(txid);\n      alert(`Transfer successful! Transaction ID: ${txid}`);\n    } catch (err: any) {\n      console.error(err);\n      alert(`Transfer failed: ${err.message}`);\n    }\n  };\n\n  const tooltipId = `tooltip-disclaimer`;\n\n  return (\n    <div className=\"App\">\n      <div className=\"bg-gray m-4 p-4\">\n        <div className=\"mt-12\">\n          <div className=\"parchment-container\">\n            <h4 className=\"text-4xl font-semibold text-black text-center title\">\n              <span className=\"hover:text-blue-500\"><a href=\"https://github.com/usselman/library-of-babel\">Library of Babel</a></span>\n            </h4>\n\n            <p className=\"text-sm font-semibold text-black text-center hover:text-blue-500 rounded-xl author\">\n              <a href=\"https://twitter.com/worldbuilder_us\">@worldbuilder.us</a>\n            </p>\n          </div>\n\n          <h2 className=\"md:mt-2 sm:mt-0\"><span className=\"text-green-600\">${exchangeRate.toFixed(2)}</span> #{currentBlockHeight}</h2>\n          <div className=\"h-16\" />\n          <PandaConnectButton\n            className=\"m-4 p-4 z-50 rounded-md bg-blue-900 text-white hover:bg-blue-600 md:fixed top-4 right-4 sm:hidden md:scale-100 sm:scale-50 place-content-center sm:justify-center md:flex\"\n            onClick={handleConnect}\n          />\n\n          <h4 className=\"text-4xl font-semibold text-black text-center\">\n            Inscription Market\n          </h4>\n          <p className=\"text-md text-black text-center mt-2\">Market Fee: 1.5%</p>\n          {wallet && (\n            <div className=\"absolute top-8 left-8\">\n              <h4 className=\"text-md font-light text-black text-left\">\n                <span className=\"font-bold\">Ord address:</span> {ordAddress}\n              </h4>\n              <h4 className=\"text-md font-light text-black text-left\">\n                <span className=\"font-bold\">BSV address:</span> {bsvAddress}\n              </h4>\n            </div>)}\n          <div className=\"text-xl font-bold text-red-500 p-4 text-center\">\n            <a\n              data-tooltip-id={tooltipId}\n              data-tooltip-content={`\n                This is an EXPERIMENTAL MARKETPLACE. Research before purchase!\n                TRADE AT YOUR OWN RISK.\n              `}\n              data-tooltip-place=\"bottom\"\n            >\n              <p>DISCLAIMER</p>\n            </a>\n            <Tooltip id={tooltipId} />\n          </div>\n\n          <div className=\"flex justify-center space-x-2 mt-4\">\n            {[\"OG Marketplace\", \"Gear Marketplace\", \"HODL Marketplace\", \"Frog Marketplace\", \"Gay Frog Marketplace\"].map((type) => (\n              <div\n                key={type}\n                className={`cursor-pointer p-2 text-sm md:text-md lg:text-lg ${selectedType === type ? \"bg-blue-500 text-white\" : \"bg-white text-black\"} rounded-xl`}\n                onClick={() => handleChange(type)}\n              >\n                {type}\n              </div>\n            ))}\n          </div>\n          <div className=\"mt-4\">\n            <svg height=\"1\" width=\"100%\">\n              <line x1=\"0\" y1=\"0\" x2=\"100%\" y2=\"0\"\n                stroke=\"black\"\n                strokeWidth=\"2\"\n              />\n            </svg>\n          </div>\n          {renderContent()}\n        </div>\n      </div>\n    </div>\n  );\n};","/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/page/api/orderbook.js",[],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/page/api/hodlbook.js",[],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/bsOrderToTxFormat.js",["175"],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/PriceHistoryChart.js",["176","177","178","179","180","181"],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/page/api/ogbook.js",[],[],"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/OGMarketplaceCard.jsx",["182"],[],"import React, { useState, useEffect } from 'react';\n\nconst OGMarketplaceCard = ({ listing, purchaseOrdinal, exchangeRate }) => {\n    const [verificationStatus, setVerificationStatus] = useState('Pending');\n    const [isHovered, setIsHovered] = React.useState(false);\n    const [verificationStyle, setVerificationStyle] = useState({});\n    const lockQueryUrl = 'https://ordinals.gorillapool.io/api/locks/txid/';\n\n    const MARKET_FEE_RATE = 0.015;\n    let price = ((listing.data.list.price / 100000000) + (listing.data.list.price / 100000000 * MARKET_FEE_RATE)).toFixed(4);\n    let USDprice = (price * exchangeRate).toFixed(2);\n\n    useEffect(() => {\n        verifyRecord();\n    }, [listing]);\n\n    if (!listing || listing.length === 0) {\n        return <div>No listing available</div>;\n    }\n\n    const isDigit = (item) => {\n        const selectedIndex = item.origin?.data?.insc?.words[0] === 'og' ? 1 : 0;\n        const parsed = parseInt(item.origin?.data?.insc?.words[selectedIndex], 10);\n        return !isNaN(parsed);\n    };\n\n    const handleBuyClick = () => {\n        const outpoint = listing.outpoint;\n        purchaseOrdinal(outpoint, MARKET_FEE_RATE, \"1PSmNxwoBVcsAB3bRRccDqbFkjtBemS5qh\");\n    };\n\n    // Refactored checkLock function\n    const checkLock = async (txid) => {\n        const url = lockQueryUrl + txid;\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            if (!data || data.length === 0) {\n                return false;\n            }\n            for (const item of data) {\n                if (item.data && item.data.lock && item.satoshis >= 1000000 && item.data.lock.until >= 1050000) {\n                    return true; // Valid lock found\n                }\n            }\n            return false; // No valid lock found\n        } catch (error) {\n            console.error('Error fetching lock data:', error);\n            return false;\n        }\n    };\n\n    const verifyRecord = async () => {\n        if (!isDigit(listing)) {\n            setVerificationStatus(\"Not A Number (✗)\");\n            return;\n        }\n\n        try {\n            // Assuming the first check is to ensure the '.og' is the first of its kind\n            const hasLock = await checkLock(listing.origin.outpoint);\n            if (hasLock) {\n                setVerificationStatus(\"Verified (✓)\");\n                setVerificationStyle({ color: 'green' });\n            } else {\n                setVerificationStatus(\"Not Verified or Lock Invalid (✗)\");\n                setVerificationStyle({ color: 'red' });\n            }\n        } catch (error) {\n            console.error('Error verifying record:', error);\n            setVerificationStatus(\"Verification Error\");\n            setVerificationStyle({ color: 'red' });\n        }\n    };\n\n    return (\n        <div\n            className=\"marketplace-container\"\