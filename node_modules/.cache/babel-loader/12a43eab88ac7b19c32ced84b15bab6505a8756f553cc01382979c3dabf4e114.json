{"ast":null,"code":"export const bsOrderToTxFormat = bsvOrder => {\n  // Parse the input BSV ordinal outpoint into its components\n  const txidHex = bsvOrder.substring(0, 64); // Extract the first 64 characters as txid\n  const outputIndexHex = bsvOrder.substring(64); // Extract the remainder as outputIndex in hexadecimal\n\n  // Convert txid to little-endian format\n  const txidBytes = Buffer.from(txidHex, 'hex').reverse();\n\n  // Convert output index to uint32LE (4 bytes)\n  const outputIndex = Buffer.alloc(4);\n  //outputIndex.writeUInt32LE(parseInt(outputIndexHex, 16));\n\n  // Concatenate txid and output index to get the final buffer\n  const txFormatBuffer = Buffer.concat([txidBytes, outputIndex]);\n\n  // Convert the buffer to a hexadecimal string\n  const txFormatHex = txFormatBuffer.toString('hex');\n  return txFormatHex;\n};","map":{"version":3,"names":["bsOrderToTxFormat","bsvOrder","txidHex","substring","outputIndexHex","txidBytes","Buffer","from","reverse","outputIndex","alloc","txFormatBuffer","concat","txFormatHex","toString"],"sources":["/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/bsOrderToTxFormat.js"],"sourcesContent":["export const bsOrderToTxFormat = (bsvOrder) => {\n    // Parse the input BSV ordinal outpoint into its components\n    const txidHex = bsvOrder.substring(0, 64); // Extract the first 64 characters as txid\n    const outputIndexHex = bsvOrder.substring(64); // Extract the remainder as outputIndex in hexadecimal\n\n    // Convert txid to little-endian format\n    const txidBytes = Buffer.from(txidHex, 'hex').reverse();\n\n    // Convert output index to uint32LE (4 bytes)\n    const outputIndex = Buffer.alloc(4);\n    //outputIndex.writeUInt32LE(parseInt(outputIndexHex, 16));\n\n    // Concatenate txid and output index to get the final buffer\n    const txFormatBuffer = Buffer.concat([txidBytes, outputIndex]);\n\n    // Convert the buffer to a hexadecimal string\n    const txFormatHex = txFormatBuffer.toString('hex');\n\n    return txFormatHex;\n};"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAIC,QAAQ,IAAK;EAC3C;EACA,MAAMC,OAAO,GAAGD,QAAQ,CAACE,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EAC3C,MAAMC,cAAc,GAAGH,QAAQ,CAACE,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE/C;EACA,MAAME,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACL,OAAO,EAAE,KAAK,CAAC,CAACM,OAAO,CAAC,CAAC;;EAEvD;EACA,MAAMC,WAAW,GAAGH,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC;EACnC;;EAEA;EACA,MAAMC,cAAc,GAAGL,MAAM,CAACM,MAAM,CAAC,CAACP,SAAS,EAAEI,WAAW,CAAC,CAAC;;EAE9D;EACA,MAAMI,WAAW,GAAGF,cAAc,CAACG,QAAQ,CAAC,KAAK,CAAC;EAElD,OAAOD,WAAW;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}