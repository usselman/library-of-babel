{"ast":null,"code":"import bsv from 'bsv';\nexport const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const P2PKH_SIGSCRIPT_SIZE = 1 + 73 + 1 + 33;\nexport const P2PKH_OUTPUT_SIZE = 8 + 1 + 1 + 1 + 1 + 20 + 1 + 1;\nexport const P2PKH_INPUT_SIZE = 36 + 1 + P2PKH_SIGSCRIPT_SIZE + 4;\nexport const PUB_KEY_SIZE = 66;\nexport const FEE_PER_KB = 1;\nexport const FEE_FACTOR = FEE_PER_KB / 1000;\nexport const SIGHASH_ALL_FORKID = bsv.crypto.Signature.SIGHASH_ALL | bsv.crypto.Signature.SIGHASH_FORKID;\nexport const SIGHASH_SINGLE_ANYONECANPAY_FORKID = bsv.crypto.Signature.SIGHASH_SINGLE | bsv.crypto.Signature.SIGHASH_ANYONECANPAY | bsv.crypto.Signature.SIGHASH_FORKID;\nexport const SIGHASH_ALL_ANYONECANPAY_FORKID = bsv.crypto.Signature.SIGHASH_ALL | bsv.crypto.Signature.SIGHASH_ANYONECANPAY | bsv.crypto.Signature.SIGHASH_FORKID;\nexport const ORD_LOCK_PREFIX = '2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000';\nexport const ORD_LOCK_SUFFIX = '615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868';\nexport const base64ToArrayBuffer = base64 => {\n  const binary_string = atob(base64);\n  const bytes = new Uint8Array(binary_string.length);\n  for (let i = 0; i < binary_string.length; i++) {\n    bytes[i] = binary_string.charCodeAt(i);\n  }\n  return bytes;\n};\nexport const dataToBuf = arr => {\n  const bufferWriter = bsv.encoding.BufferWriter();\n  arr.forEach(a => {\n    bufferWriter.writeUInt8(a);\n  });\n  return bufferWriter.toBuffer();\n};\nexport const getScriptPushData = data => {\n  const b64 = btoa(data);\n  const abuf = base64ToArrayBuffer(b64);\n  return dataToBuf(abuf);\n};\nexport const getUTXOs = async address => {\n  const r = await fetch(`https://api.whatsonchain.com/v1/bsv/main/address/${address}/unspent`);\n  const res = await r.json();\n  return res;\n};\nexport const getRawtx = async txid => {\n  const r = await fetch(`https://api.whatsonchain.com/v1/bsv/main/tx/${txid}/hex`);\n  const raw = await r.text();\n  return raw;\n};\nexport const between = (x, min, max) => {\n  return x >= min && x <= max;\n};\nexport const getPaymentUTXOs = async (address, amount) => {\n  const utxos = await getUTXOs(address);\n  const addr = bsv.Address.fromString(address);\n  const script = bsv.Script.fromAddress(addr);\n  let cache = [],\n    satoshis = 0;\n  for (let utxo of utxos) {\n    if (utxo.value > 1) {\n      const foundUtxo = utxos.find(utxo => utxo.value + 2 > amount);\n      if (foundUtxo) {\n        return [{\n          satoshis: foundUtxo.value,\n          vout: foundUtxo.tx_pos,\n          txid: foundUtxo.tx_hash,\n          script: script.toHex()\n        }];\n      }\n      cache.push(utxo);\n      if (amount) {\n        satoshis = cache.reduce((a, curr) => {\n          return a + curr.value;\n        }, 0);\n        if (satoshis >= amount) {\n          return cache.map(utxo => {\n            return {\n              satoshis: utxo.value,\n              vout: utxo.tx_pos,\n              txid: utxo.tx_hash,\n              script: script.toHex()\n            };\n          });\n        } else if (satoshis === amount || between(amount, satoshis - P2PKH_INPUT_SIZE, satoshis + P2PKH_INPUT_SIZE)) {\n          return cache.map(utxo => {\n            return {\n              satoshis: utxo.value,\n              vout: utxo.tx_pos,\n              txid: utxo.tx_hash,\n              script: script.toHex()\n            };\n          });\n        }\n      } else {\n        return utxos.map(utxo => {\n          return {\n            satoshis: utxo.value,\n            vout: utxo.tx_pos,\n            txid: utxo.tx_hash,\n            script: script.toHex()\n          };\n        });\n      }\n    }\n  }\n  return [];\n};\nexport const payForRawTx = async (rawtx, payPkWIF) => {\n  const bsvtx = bsv.Transaction(rawtx);\n  const satoshis = bsvtx.outputs.reduce((t, e) => t + e._satoshis, 0);\n  const txFee = parseInt((bsvtx._estimateSize() + P2PKH_INPUT_SIZE) * FEE_FACTOR) + 1;\n  const paymentAddress = getAddressFromPrivateKey(payPkWIF);\n  const utxos = await getPaymentUTXOs(paymentAddress, satoshis + txFee);\n  bsvtx.from(utxos);\n  const inputSatoshis = utxos.reduce((t, e) => t + e.satoshis, 0);\n  bsvtx.to(paymentAddress, inputSatoshis - satoshis - txFee);\n  bsvtx.sign(bsv.PrivateKey.fromWIF(payPkWIF));\n  return bsvtx.toString();\n};\nexport const broadcast = async txhex => {\n  const r = await (await fetch(`https://api.whatsonchain.com/v1/bsv/main/tx/raw`, {\n    method: 'post',\n    body: JSON.stringify({\n      txhex\n    })\n  })).json();\n  return r;\n};\nexport const bsOrderToTxFormat = bsvOrder => {\n  // Parse the input BSV ordinal outpoint into its components\n  const txidHex = bsvOrder.substring(0, 64); // Extract the first 64 characters as txid\n  const outputIndexHex = bsvOrder.substring(64); // Extract the remainder as outputIndex in hexadecimal\n\n  // Convert txid to little-endian format\n  const txidBytes = Buffer.from(txidHex, 'hex').reverse();\n\n  // Convert output index to uint32LE (4 bytes)\n  const outputIndex = Buffer.alloc(4);\n  //outputIndex.writeUInt32LE(parseInt(outputIndexHex, 16));\n\n  // Concatenate txid and output index to get the final buffer\n  const txFormatBuffer = Buffer.concat([txidBytes, outputIndex]);\n\n  // Convert the buffer to a hexadecimal string\n  const txFormatHex = txFormatBuffer.toString('hex');\n  return txFormatHex;\n};","map":{"version":3,"names":["bsv","MAP_PREFIX","P2PKH_SIGSCRIPT_SIZE","P2PKH_OUTPUT_SIZE","P2PKH_INPUT_SIZE","PUB_KEY_SIZE","FEE_PER_KB","FEE_FACTOR","SIGHASH_ALL_FORKID","crypto","Signature","SIGHASH_ALL","SIGHASH_FORKID","SIGHASH_SINGLE_ANYONECANPAY_FORKID","SIGHASH_SINGLE","SIGHASH_ANYONECANPAY","SIGHASH_ALL_ANYONECANPAY_FORKID","ORD_LOCK_PREFIX","ORD_LOCK_SUFFIX","base64ToArrayBuffer","base64","binary_string","atob","bytes","Uint8Array","length","i","charCodeAt","dataToBuf","arr","bufferWriter","encoding","BufferWriter","forEach","a","writeUInt8","toBuffer","getScriptPushData","data","b64","btoa","abuf","getUTXOs","address","r","fetch","res","json","getRawtx","txid","raw","text","between","x","min","max","getPaymentUTXOs","amount","utxos","addr","Address","fromString","script","Script","fromAddress","cache","satoshis","utxo","value","foundUtxo","find","vout","tx_pos","tx_hash","toHex","push","reduce","curr","map","payForRawTx","rawtx","payPkWIF","bsvtx","Transaction","outputs","t","e","_satoshis","txFee","parseInt","_estimateSize","paymentAddress","getAddressFromPrivateKey","from","inputSatoshis","to","sign","PrivateKey","fromWIF","toString","broadcast","txhex","method","body","JSON","stringify","bsOrderToTxFormat","bsvOrder","txidHex","substring","outputIndexHex","txidBytes","Buffer","reverse","outputIndex","alloc","txFormatBuffer","concat","txFormatHex"],"sources":["/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/helpers.js"],"sourcesContent":["import bsv from 'bsv';\n\nexport const MAP_PREFIX = \"1PuQa7K62MiKCtssSLKy1kh56WWU7MtUR5\";\nexport const P2PKH_SIGSCRIPT_SIZE = 1 + 73 + 1 + 33;\nexport const P2PKH_OUTPUT_SIZE = 8 + 1 + 1 + 1 + 1 + 20 + 1 + 1;\nexport const P2PKH_INPUT_SIZE = 36 + 1 + P2PKH_SIGSCRIPT_SIZE + 4;\nexport const PUB_KEY_SIZE = 66;\nexport const FEE_PER_KB = 1;\nexport const FEE_FACTOR = (FEE_PER_KB / 1000);\nexport const SIGHASH_ALL_FORKID = bsv.crypto.Signature.SIGHASH_ALL | bsv.crypto.Signature.SIGHASH_FORKID;\nexport const SIGHASH_SINGLE_ANYONECANPAY_FORKID = bsv.crypto.Signature.SIGHASH_SINGLE | bsv.crypto.Signature.SIGHASH_ANYONECANPAY | bsv.crypto.Signature.SIGHASH_FORKID;\nexport const SIGHASH_ALL_ANYONECANPAY_FORKID = bsv.crypto.Signature.SIGHASH_ALL | bsv.crypto.Signature.SIGHASH_ANYONECANPAY | bsv.crypto.Signature.SIGHASH_FORKID;\nexport const ORD_LOCK_PREFIX = '2097dfd76851bf465e8f715593b217714858bbe9570ff3bd5e33840a34e20ff0262102ba79df5f8ae7604a9830f03c7933028186aede0675a16f025dc4f8be8eec0382201008ce7480da41702918d1ec8e6849ba32b4d65b1e40dc669c31a1e6306b266c0000';\nexport const ORD_LOCK_SUFFIX = '615179547a75537a537a537a0079537a75527a527a7575615579008763567901c161517957795779210ac407f0e4bd44bfc207355a778b046225a7068fc59ee7eda43ad905aadbffc800206c266b30e6a1319c66dc401e5bd6b432ba49688eecd118297041da8074ce081059795679615679aa0079610079517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01007e81517a75615779567956795679567961537956795479577995939521414136d08c5ed2bf3ba048afe6dcaebafeffffffffffffffffffffffffffffff00517951796151795179970079009f63007952799367007968517a75517a75517a7561527a75517a517951795296a0630079527994527a75517a6853798277527982775379012080517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f517f7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e7c7e01205279947f7754537993527993013051797e527e54797e58797e527e53797e52797e57797e0079517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a75517a756100795779ac517a75517a75517a75517a75517a75517a75517a75517a75517a7561517a75517a756169587951797e58797eaa577961007982775179517958947f7551790128947f77517a75517a75618777777777777777777767557951876351795779a9876957795779ac777777777777777767006868';\nexport const base64ToArrayBuffer = base64 => {\n    const binary_string = atob(base64);\n    const bytes = new Uint8Array(binary_string.length);\n    for (let i = 0; i < binary_string.length; i++) { bytes[i] = binary_string.charCodeAt(i) }\n    return bytes;\n}\nexport const dataToBuf = arr => {\n    const bufferWriter = bsv.encoding.BufferWriter();\n    arr.forEach(a => { bufferWriter.writeUInt8(a) });\n    return bufferWriter.toBuffer();\n}\nexport const getScriptPushData = data => {\n    const b64 = btoa(data);\n    const abuf = base64ToArrayBuffer(b64);\n    return dataToBuf(abuf);\n}\nexport const getUTXOs = async address => {\n    const r = await fetch(`https://api.whatsonchain.com/v1/bsv/main/address/${address}/unspent`);\n    const res = await r.json();\n    return res;\n}\nexport const getRawtx = async txid => {\n    const r = await fetch(`https://api.whatsonchain.com/v1/bsv/main/tx/${txid}/hex`);\n    const raw = await r.text();\n    return raw;\n}\nexport const between = (x, min, max) => { return x >= min && x <= max }\nexport const getPaymentUTXOs = async (address, amount) => {\n    const utxos = await getUTXOs(address);\n    const addr = bsv.Address.fromString(address);\n    const script = bsv.Script.fromAddress(addr);\n    let cache = [], satoshis = 0;\n    for (let utxo of utxos) {\n        if (utxo.value > 1) {\n            const foundUtxo = utxos.find(utxo => utxo.value + 2 > amount);\n            if (foundUtxo) {\n                return [{ satoshis: foundUtxo.value, vout: foundUtxo.tx_pos, txid: foundUtxo.tx_hash, script: script.toHex() }]\n            }\n            cache.push(utxo);\n            if (amount) {\n                satoshis = cache.reduce((a, curr) => { return a + curr.value }, 0);\n                if (satoshis >= amount) {\n                    return cache.map(utxo => {\n                        return { satoshis: utxo.value, vout: utxo.tx_pos, txid: utxo.tx_hash, script: script.toHex() }\n                    });\n                }\n                else if (satoshis === amount || between(amount, satoshis - P2PKH_INPUT_SIZE, satoshis + P2PKH_INPUT_SIZE)) {\n                    return cache.map(utxo => {\n                        return { satoshis: utxo.value, vout: utxo.tx_pos, txid: utxo.tx_hash, script: script.toHex() }\n                    })\n                }\n            } else {\n                return utxos.map(utxo => {\n                    return { satoshis: utxo.value, vout: utxo.tx_pos, txid: utxo.tx_hash, script: script.toHex() }\n                });\n            }\n        }\n    }\n    return [];\n}\nexport const payForRawTx = async (rawtx, payPkWIF) => {\n    const bsvtx = bsv.Transaction(rawtx);\n    const satoshis = bsvtx.outputs.reduce(((t, e) => t + e._satoshis), 0);\n    const txFee = parseInt(((bsvtx._estimateSize() + P2PKH_INPUT_SIZE) * FEE_FACTOR)) + 1;\n    const paymentAddress = getAddressFromPrivateKey(payPkWIF);\n    const utxos = await getPaymentUTXOs(paymentAddress, satoshis + txFee);\n    bsvtx.from(utxos);\n    const inputSatoshis = utxos.reduce(((t, e) => t + e.satoshis), 0);\n    bsvtx.to(paymentAddress, inputSatoshis - satoshis - txFee);\n    bsvtx.sign(bsv.PrivateKey.fromWIF(payPkWIF));\n    return bsvtx.toString();\n}\nexport const broadcast = async txhex => {\n    const r = await (await fetch(`https://api.whatsonchain.com/v1/bsv/main/tx/raw`, {\n        method: 'post',\n        body: JSON.stringify({ txhex })\n    })).json();\n    return r;\n}\n\nexport const bsOrderToTxFormat = (bsvOrder) => {\n    // Parse the input BSV ordinal outpoint into its components\n    const txidHex = bsvOrder.substring(0, 64); // Extract the first 64 characters as txid\n    const outputIndexHex = bsvOrder.substring(64); // Extract the remainder as outputIndex in hexadecimal\n\n    // Convert txid to little-endian format\n    const txidBytes = Buffer.from(txidHex, 'hex').reverse();\n\n    // Convert output index to uint32LE (4 bytes)\n    const outputIndex = Buffer.alloc(4);\n    //outputIndex.writeUInt32LE(parseInt(outputIndexHex, 16));\n\n    // Concatenate txid and output index to get the final buffer\n    const txFormatBuffer = Buffer.concat([txidBytes, outputIndex]);\n\n    // Convert the buffer to a hexadecimal string\n    const txFormatHex = txFormatBuffer.toString('hex');\n\n    return txFormatHex;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}