{"ast":null,"code":"var _jsxFileName = \"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/PriceHistoryChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PriceHistoryChart = ({\n  data\n}) => {\n  _s();\n  const [exchangeRate, setExchangeRate] = useState(0);\n  useEffect(() => {\n    async function getExchangeRate() {\n      const url = 'https://api.whatsonchain.com/v1/bsv/main/exchangerate';\n      try {\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error('Network response was not ok ' + response.statusText);\n        }\n        const data = await response.json();\n        setExchangeRate(parseFloat(data.rate));\n        console.log(\"Exchange rate fetched: \", exchangeRate);\n      } catch (error) {\n        console.error(\"Fetching exchange rate failed: \", error);\n      }\n    }\n    getExchangeRate();\n  }, []); // Fetch exchange rate when the component mounts\n\n  // Extract values for height, price, and amount from each listing\n  const heights = data.map(item => item.height);\n  const prices = data.map(item => item.data.list.price);\n\n  // Sort heights in ascending order\n  const sortedHeights = [...heights].sort((a, b) => a - b);\n\n  // Filter out null values (missing data points) from the data\n  const filteredData = data.filter(item => item.origin && item.origin.data && item.origin.data.insc);\n  const amounts = filteredData.map(item => {\n    return parseFloat(item.origin.data.insc.json.amt);\n  });\n\n  // Calculate the price/amount ratio in USD\n  const priceAmountRatioUSD = amounts.map((amt, index) => amt / prices[index] * exchangeRate);\n  //console.log(\"Prices: \", prices);\n  const marketcap = prices[0] * 21000 / 100000000 * exchangeRate;\n  const chartData = {\n    labels: sortedHeights.map(String),\n    // Use sorted heights for the X-axis (category)\n    datasets: [{\n      label: 'Price per Token',\n      data: priceAmountRatioUSD,\n      // Y-axis data (amount/price in USD)\n      fill: false,\n      backgroundColor: 'white',\n      borderColor: 'green',\n      pointRadius: 2 // Set point radius\n    }]\n  };\n\n  const options = {\n    scales: {\n      x: {\n        type: 'category',\n        // Specify x-axis as \"category\"\n        position: 'bottom',\n        reverse: false,\n        // Keep the x-axis in ascending order\n        title: {\n          display: true,\n          text: 'Block Height'\n        }\n      },\n      y: {\n        beginAtZero: false,\n        // Start the y-axis at zero\n        title: {\n          display: true,\n          text: 'Price per token (USD)'\n        },\n        ticks: {\n          callback: value => `$${value.toFixed(4)}` // Add '$' symbol and format to 2 decimal places\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold m-4 text-center\",\n      children: [\"Marketcap: $\", marketcap.toFixed(0)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(PriceHistoryChart, \"gSmWrHFUMOsb5AqG/YgSVfMmPvw=\");\n_c = PriceHistoryChart;\nexport default PriceHistoryChart;\nvar _c;\n$RefreshReg$(_c, \"PriceHistoryChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","jsxDEV","_jsxDEV","PriceHistoryChart","data","_s","exchangeRate","setExchangeRate","getExchangeRate","url","response","fetch","ok","Error","statusText","json","parseFloat","rate","console","log","error","heights","map","item","height","prices","list","price","sortedHeights","sort","a","b","filteredData","filter","origin","insc","amounts","amt","priceAmountRatioUSD","index","marketcap","chartData","labels","String","datasets","label","fill","backgroundColor","borderColor","pointRadius","options","scales","x","type","position","reverse","title","display","text","y","beginAtZero","ticks","callback","value","toFixed","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/PriceHistoryChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\n\nconst PriceHistoryChart = ({ data }) => {\n    const [exchangeRate, setExchangeRate] = useState(0);\n\n    useEffect(() => {\n        async function getExchangeRate() {\n            const url = 'https://api.whatsonchain.com/v1/bsv/main/exchangerate';\n            try {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    throw new Error('Network response was not ok ' + response.statusText);\n                }\n                const data = await response.json();\n                setExchangeRate(parseFloat(data.rate));\n                console.log(\"Exchange rate fetched: \", exchangeRate);\n            } catch (error) {\n                console.error(\"Fetching exchange rate failed: \", error);\n            }\n        }\n\n        getExchangeRate();\n    }, []); // Fetch exchange rate when the component mounts\n\n    // Extract values for height, price, and amount from each listing\n    const heights = data.map((item) => item.height);\n    const prices = data.map((item) => item.data.list.price);\n\n    // Sort heights in ascending order\n    const sortedHeights = [...heights].sort((a, b) => a - b);\n\n    // Filter out null values (missing data points) from the data\n    const filteredData = data.filter((item) => item.origin && item.origin.data && item.origin.data.insc);\n\n    const amounts = filteredData.map((item) => {\n        return parseFloat(item.origin.data.insc.json.amt);\n    });\n\n    // Calculate the price/amount ratio in USD\n    const priceAmountRatioUSD = amounts.map((amt, index) => (amt / prices[index]) * exchangeRate);\n    //console.log(\"Prices: \", prices);\n    const marketcap = (prices[0] * 21000) / 100000000 * exchangeRate;\n\n    const chartData = {\n        labels: sortedHeights.map(String), // Use sorted heights for the X-axis (category)\n        datasets: [\n            {\n                label: 'Price per Token',\n                data: priceAmountRatioUSD, // Y-axis data (amount/price in USD)\n                fill: false,\n                backgroundColor: 'white',\n                borderColor: 'green',\n                pointRadius: 2, // Set point radius\n            },\n        ],\n    };\n\n    const options = {\n        scales: {\n            x: {\n                type: 'category', // Specify x-axis as \"category\"\n                position: 'bottom',\n                reverse: false, // Keep the x-axis in ascending order\n                title: {\n                    display: true,\n                    text: 'Block Height',\n                },\n            },\n            y: {\n                beginAtZero: false, // Start the y-axis at zero\n                title: {\n                    display: true,\n                    text: 'Price per token (USD)',\n                },\n                ticks: {\n                    callback: (value) => `$${value.toFixed(4)}`, // Add '$' symbol and format to 2 decimal places\n                },\n            },\n        },\n    };\n\n    return (\n        <div>\n            <h1 className=\"text-2xl font-bold m-4 text-center\">Marketcap: ${marketcap.toFixed(0)}</h1>\n            {/* <h2 className=\"font-bold\">Listing Price History (USD) - WIP</h2> */}\n            {/* <Line data={chartData} options={options} /> */}\n        </div>\n    );\n};\n\nexport default PriceHistoryChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}