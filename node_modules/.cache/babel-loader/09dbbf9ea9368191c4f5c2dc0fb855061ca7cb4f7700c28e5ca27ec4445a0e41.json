{"ast":null,"code":"import _toConsumableArray from\"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _regeneratorRuntime from\"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import{Line}from'react-chartjs-2';import Chart from'chart.js/auto';import{jsx as _jsx}from\"react/jsx-runtime\";var PriceHistoryChart=function PriceHistoryChart(_ref){var data=_ref.data;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),exchangeRate=_useState2[0],setExchangeRate=_useState2[1];useEffect(function(){function getExchangeRate(){return _getExchangeRate.apply(this,arguments);}function _getExchangeRate(){_getExchangeRate=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var url,response,_data;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:url='https://api.whatsonchain.com/v1/bsv/main/exchangerate';_context.prev=1;_context.next=4;return fetch(url);case 4:response=_context.sent;if(response.ok){_context.next=7;break;}throw new Error('Network response was not ok '+response.statusText);case 7:_context.next=9;return response.json();case 9:_data=_context.sent;setExchangeRate(parseFloat(_data.rate));console.log(\"Exchange rate fetched: \",exchangeRate);_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](1);console.error(\"Fetching exchange rate failed: \",_context.t0);case 17:case\"end\":return _context.stop();}},_callee,null,[[1,14]]);}));return _getExchangeRate.apply(this,arguments);}getExchangeRate();},[]);// Fetch exchange rate when the component mounts\n// Extract values for height, price, and amount from each listing\nvar heights=data.map(function(item){return item.height;});var prices=data.map(function(item){return item.data.list.price;});// Sort heights in ascending order\nvar sortedHeights=_toConsumableArray(heights).sort(function(a,b){return a-b;});// Filter out null values (missing data points) from the data\nvar filteredData=data.filter(function(item){return item.origin&&item.origin.data&&item.origin.data.insc;});var amounts=filteredData.map(function(item){return parseFloat(item.origin.data.insc.json.amt);});// Calculate the price/amount ratio in USD\nvar priceAmountRatioUSD=amounts.map(function(amt,index){return amt/prices[index]*exchangeRate;});//console.log(\"Prices: \", prices);\nvar marketcap=prices[0]*21000/100000000*exchangeRate;var chartData={labels:sortedHeights.map(String),// Use sorted heights for the X-axis (category)\ndatasets:[{label:'Price per Token',data:priceAmountRatioUSD,// Y-axis data (amount/price in USD)\nfill:false,backgroundColor:'white',borderColor:'green',pointRadius:2// Set point radius\n}]};var options={scales:{x:{type:'category',// Specify x-axis as \"category\"\nposition:'bottom',reverse:false,// Keep the x-axis in ascending order\ntitle:{display:true,text:'Block Height'}},y:{beginAtZero:false,// Start the y-axis at zero\ntitle:{display:true,text:'Price per token (USD)'},ticks:{callback:function callback(value){return\"$\".concat(value.toFixed(4));}// Add '$' symbol and format to 2 decimal places\n}}}};return/*#__PURE__*/_jsx(\"div\",{});};export default PriceHistoryChart;","map":{"version":3,"names":["React","useEffect","useState","Line","Chart","jsx","_jsx","PriceHistoryChart","_ref","data","_useState","_useState2","_slicedToArray","exchangeRate","setExchangeRate","getExchangeRate","_getExchangeRate","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","response","_data","wrap","_callee$","_context","prev","next","fetch","sent","ok","Error","statusText","json","parseFloat","rate","console","log","t0","error","stop","heights","map","item","height","prices","list","price","sortedHeights","_toConsumableArray","sort","a","b","filteredData","filter","origin","insc","amounts","amt","priceAmountRatioUSD","index","marketcap","chartData","labels","String","datasets","label","fill","backgroundColor","borderColor","pointRadius","options","scales","x","type","position","reverse","title","display","text","y","beginAtZero","ticks","callback","value","concat","toFixed"],"sources":["/Users/shirishsarkar/Library/Mobile Documents/com~apple~CloudDocs/Documents/_CODE/library-of-babel/src/components/PriceHistoryChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\n\nconst PriceHistoryChart = ({ data }) => {\n    const [exchangeRate, setExchangeRate] = useState(0);\n\n    useEffect(() => {\n        async function getExchangeRate() {\n            const url = 'https://api.whatsonchain.com/v1/bsv/main/exchangerate';\n            try {\n                const response = await fetch(url);\n                if (!response.ok) {\n                    throw new Error('Network response was not ok ' + response.statusText);\n                }\n                const data = await response.json();\n                setExchangeRate(parseFloat(data.rate));\n                console.log(\"Exchange rate fetched: \", exchangeRate);\n            } catch (error) {\n                console.error(\"Fetching exchange rate failed: \", error);\n            }\n        }\n\n        getExchangeRate();\n    }, []); // Fetch exchange rate when the component mounts\n\n    // Extract values for height, price, and amount from each listing\n    const heights = data.map((item) => item.height);\n    const prices = data.map((item) => item.data.list.price);\n\n    // Sort heights in ascending order\n    const sortedHeights = [...heights].sort((a, b) => a - b);\n\n    // Filter out null values (missing data points) from the data\n    const filteredData = data.filter((item) => item.origin && item.origin.data && item.origin.data.insc);\n\n    const amounts = filteredData.map((item) => {\n        return parseFloat(item.origin.data.insc.json.amt);\n    });\n\n    // Calculate the price/amount ratio in USD\n    const priceAmountRatioUSD = amounts.map((amt, index) => (amt / prices[index]) * exchangeRate);\n    //console.log(\"Prices: \", prices);\n    const marketcap = (prices[0] * 21000) / 100000000 * exchangeRate;\n\n    const chartData = {\n        labels: sortedHeights.map(String), // Use sorted heights for the X-axis (category)\n        datasets: [\n            {\n                label: 'Price per Token',\n                data: priceAmountRatioUSD, // Y-axis data (amount/price in USD)\n                fill: false,\n                backgroundColor: 'white',\n                borderColor: 'green',\n                pointRadius: 2, // Set point radius\n            },\n        ],\n    };\n\n    const options = {\n        scales: {\n            x: {\n                type: 'category', // Specify x-axis as \"category\"\n                position: 'bottom',\n                reverse: false, // Keep the x-axis in ascending order\n                title: {\n                    display: true,\n                    text: 'Block Height',\n                },\n            },\n            y: {\n                beginAtZero: false, // Start the y-axis at zero\n                title: {\n                    display: true,\n                    text: 'Price per token (USD)',\n                },\n                ticks: {\n                    callback: (value) => `$${value.toFixed(4)}`, // Add '$' symbol and format to 2 decimal places\n                },\n            },\n        },\n    };\n\n    return (\n        <div>\n            {/* <h1 className=\"text-2xl font-bold m-4 text-center\">Marketcap: ${marketcap.toFixed(0)}</h1> */}\n            {/* <h2 className=\"font-bold\">Listing Price History (USD) - WIP</h2> */}\n            {/* <Line data={chartData} options={options} /> */}\n        </div>\n    );\n};\n\nexport default PriceHistoryChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}